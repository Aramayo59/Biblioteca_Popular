-- Eliminar la base de datos si ya existe
DROP DATABASE IF EXISTS `BibliotecaJoseHPorto`;

-- Crear la base de datos
CREATE DATABASE `BibliotecaJoseHPorto`;

-- Usar la base de datos recién creada
USE `BibliotecaJoseHPorto`;

-- Crear la tabla `socios`
DROP TABLE IF EXISTS `socios`;
-- Tabla que almacena la información de los socios de la biblioteca
CREATE TABLE `socios` (
  `id_socios` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(24) NOT NULL,
  `DNI` VARCHAR(11),
  `telefono` VARCHAR(11),
  `fecha_ultimo_pago` VARCHAR(11) NOT NULL,
  PRIMARY KEY (`id_socios`)
);

-- Eliminar la tabla `autor` si ya existe
DROP TABLE IF EXISTS `autor`;
-- Tabla que almacena la información de los autores de libros
CREATE TABLE `autor` (
  `id_autor` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(24) NOT NULL,
  PRIMARY KEY (`id_autor`)
);

-- Eliminar la tabla `editorial` si ya existe
DROP TABLE IF EXISTS `editorial`;
-- Tabla que almacena la información de las editoriales de libros
CREATE TABLE `editorial` (
  `id_editorial` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_editorial`)
);

-- Eliminar la tabla `subcategoria` si ya existe
DROP TABLE IF EXISTS `subcategoria`;
-- Tabla que almacena las subcategorías de los libros
CREATE TABLE `subcategoria` (
  `id_subcategoria` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_subcategoria`)
);

-- Eliminar la tabla `categoria` si ya existe
DROP TABLE IF EXISTS `categoria`;
-- Tabla que almacena las categorías de los libros, vinculadas a una subcategoría
CREATE TABLE `categoria` (
  `id_categoria` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `id_subcategoria` INT NOT NULL,
  PRIMARY KEY (`id_categoria`),
  FOREIGN KEY (`id_subcategoria`) REFERENCES subcategoria(`id_subcategoria`)
);

-- Eliminar la tabla `libros` si ya existe
DROP TABLE IF EXISTS `libros`;
-- Tabla que almacena la información de los libros
CREATE TABLE `libros` (
  `id_libros` INT NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(45) NOT NULL,
  `isbn` VARCHAR(13),
  `num_ejemplar` INT NOT NULL,
  `estado_libro` VARCHAR(11) NOT NULL,
  `id_categoria` INT NOT NULL,
  `id_editorial` INT NOT NULL,
  `id_autor` INT NOT NULL,
  PRIMARY KEY (`id_libros`),
  FOREIGN KEY (`id_editorial`) REFERENCES editorial(`id_editorial`),
  FOREIGN KEY (`id_autor`) REFERENCES autor(`id_autor`),
  FOREIGN KEY (`id_categoria`) REFERENCES categoria(`id_categoria`)
);

-- Eliminar la tabla `prestamos` si ya existe
DROP TABLE IF EXISTS `prestamos`;
-- Tabla que almacena la información de los préstamos de libros realizados por los socios
CREATE TABLE `prestamos` (
  `id_prestamos` INT NOT NULL AUTO_INCREMENT,
  `fecha_prestamo` VARCHAR(45) NOT NULL,
  `fecha_devolucion` VARCHAR(45) NOT NULL,
  `estado_prestamo` VARCHAR(255) DEFAULT 'Pendiente' NOT NULL,
  `id_socios` INT NOT NULL,  -- Relación con la tabla socios
  `id_libros` INT NOT NULL,
  PRIMARY KEY (`id_prestamos`),
  FOREIGN KEY (`id_socios`) REFERENCES socios(`id_socios`),
  FOREIGN KEY (`id_libros`) REFERENCES libros(`id_libros`)
);

-- Eliminar la tabla `bibliotecaria` si ya existe
DROP TABLE IF EXISTS `bibliotecaria`;
-- Tabla que almacena la información del personal bibliotecario
CREATE TABLE `bibliotecaria` (
  `id_bibliotecaria` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `dni` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(45) NOT NULL,
  `legajo` INT NOT NULL,
  PRIMARY KEY (`id_bibliotecaria`)
);

-- Eliminar la tabla `administrador` si ya existe
DROP TABLE IF EXISTS `administrador`;
-- Tabla que almacena la información de los administradores de la biblioteca
CREATE TABLE `administrador` (
  `id_administrador` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(24) NOT NULL,
  `dni` VARCHAR(11),
  `telefono` VARCHAR(11),
  `id_bibliotecaria` INT NOT NULL,
  PRIMARY KEY (`id_administrador`),
  FOREIGN KEY (`id_bibliotecaria`) REFERENCES bibliotecaria(`id_bibliotecaria`)
);

-- Mostrar tablas
SHOW TABLES;

-- Insertar datos de ejemplo

-- Insertar en subcategoria
INSERT INTO subcategoria (nombre) VALUES ('aventura');

-- Insertar en categoria
INSERT INTO categoria (nombre, id_subcategoria) VALUES ('Disney', 1);

-- Insertar en editorial
INSERT INTO editorial (nombre) VALUES ('Disney');

-- Insertar en autor
INSERT INTO autor (nombre, apellido) VALUES ('Jorge', 'Bucay');

-- Insertar en libros
INSERT INTO libros (titulo,isbn, num_ejemplar, estado_libro, id_categoria, id_editorial, id_autor) 
VALUES ('El Gran Gatsby','21311', 5, 'disponible', 1, 1, 1);	

INSERT INTO libros (titulo,isbn, num_ejemplar, estado_libro, id_categoria, id_editorial, id_autor) 
VALUES ('El Hombre araña','45692', 3, 'disponible', 1, 1, 1);	

INSERT INTO libros (titulo,isbn, num_ejemplar, estado_libro, id_categoria, id_editorial, id_autor) 
VALUES ('blanca Nieves','28852', 3, 'disponible', 1, 1, 1);	

-- Insertar más datos de ejemplo
INSERT INTO libros (titulo, num_ejemplar, estado_libro, id_categoria, id_editorial, id_autor) 
VALUES ('Blanca Nieves', 2, 'disponible', 1, 1, 1);	

-- Agregar más socios como ejemplo
INSERT INTO socios (nombre, apellido, DNI, telefono, fecha_ultimo_pago) 
VALUES ('Juan', 'Pérez', '12345678', '45692965', '2024-10-01');

-- Insertar más bibliotecarios como ejemplo
INSERT INTO bibliotecaria (nombre, apellido, dni, telefono, direccion, legajo) 
VALUES ('Ana', 'García', '87654321', '28852323', 'Calle Falsa 123', 1);

-- Insertar un administrador
INSERT INTO administrador (nombre, apellido, dni, telefono, id_bibliotecaria) 
VALUES ('Luis', 'Martínez', '11223344', '28852345', 1);

-- Consultar las tablas
SELECT * FROM prestamos;
SELECT * FROM libros;
SELECT * FROM socios;
SELECT * FROM editorial;
SELECT * FROM autor;
SELECT * FROM categoria;
SELECT * FROM subcategoria;
